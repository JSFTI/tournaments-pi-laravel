name: 'Player Management'
description: |-

  APIS for managing players
endpoints:
  -
    httpMethods:
      - GET
    uri: 'tournaments/{tournament}/players'
    metadata:
      title: 'Get players of a tournament'
      description: 'Players list is ordered in descending order by creation time.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      tournament:
        name: tournament
        description: ''
        required: true
        example: 20
        type: integer
        custom: []
    queryParameters:
      page:
        name: page
        description: 'Defaults to ```1```. Values less than 1 will default to 1.'
        required: false
        example: 1
        type: integer
        custom: []
      name:
        name: name
        description: 'Search for player that contains ```name``` keyword.'
        required: false
        example: null
        type: string
        custom: []
      limit:
        name: limit
        description: 'Defaults to ```10```. Values less than 1 will default to 1.'
        required: false
        example: 10
        type: integer
        custom: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "count": 100,
            "total_pages": 10,
            "page": 1,
            "next_page": "/tournaments/1/players?page=2",
            "prev_page": null,
            "results": [
              {
                "id": 1,
                "name": "Adi",
                "_url": "/players/1",
                "tournament_url": "/tournaments/1",
                "created_at": "1970-01-01 00:00:00",
                "updated_at": "1970-01-01 00:00:00"
              }
            ]
          }
        headers: []
        description: '200, Success'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
    responseFields:
      count:
        name: count
        description: ''
        type: integer
      total_pages:
        name: total_pages
        description: ''
        type: integer
      next_page:
        name: next_page
        description: 'Returns ```null``` if last page is reached.'
        type: string
      prev_page:
        name: prev_page
        description: 'Returns ```null``` if it is the first page.'
        type: string
      results:
        name: results
        description: 'List of players in tournament.'
        type: 'object[]'
      results.id:
        name: results.id
        description: 'Player ID.'
        type: integer
      results.name:
        name: results.name
        description: 'Player name.'
        type: string
      results._url:
        name: results._url
        description: 'URL to player resource.'
        type: string
      results.tournament_url:
        name: results.tournament_url
        description: 'URL to a tournament which the player belongs to.'
        type: string
  -
    httpMethods:
      - POST
    uri: 'tournaments/{tournament}/players'
    metadata:
      title: 'Create a player in a tournament'
      description: 'Only tournament owner can create a player in a tournament.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      tournament:
        name: tournament
        description: ''
        required: true
        example: 13
        type: integer
        custom: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the player. Must be less than or equal to 100 characters. Must not be greater than 100 characters.'
        required: true
        example: Adi
        type: string
        custom: []
    responses:
      -
        status: 401
        content: '{"message": "Unauthenticated"}'
        headers: []
        description: '401, Unauthorized'
      -
        status: 201
        content: |-
          {
            "id": 1,
            "name": "Adi",
            "_url": "/players/1",
            "tournament_url": "/tournaments/1",
            "created_at": "1970-01-01 00:00:00",
            "updated_at": "1970-01-01 00:00:00"
          }
        headers: []
        description: '201, Created'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
      -
        status: 422
        content: |-
          {
            "message": "Please give a name to the tournament (and 1 more error)",
            "errors": {
                "name": [
                    "Please give a name to the tournament"
                ],
                "description": [
                    "Description must be under 500 characters"
                ]
            }
          }
        headers: []
        description: '422, Invalid Request Body'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'players/{player}'
    metadata:
      title: 'Get a player'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      player:
        name: player
        description: ''
        required: true
        example: 2
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "Adi",
            "_url": "/players/1",
            "tournament_url": "/tournaments/1",
            "created_at": "1970-01-01 00:00:00",
            "updated_at": "1970-01-01 00:00:00"
          }
        headers: []
        description: '200, Success'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
    responseFields:
      id:
        name: id
        description: 'Tournament ID.'
        type: integer
      name:
        name: name
        description: 'Tournament name.'
        type: string
      _url:
        name: _url
        description: 'URL to player resource.'
        type: string
      tournament_url:
        name: tournament_url
        description: 'URL to a tournament which the player belongs to.'
        type: string
      created_at:
        name: created_at
        description: 'Tournament creation timestamp.'
        type: string
      updated_at:
        name: updated_at
        description: 'Last update timestamp.'
        type: string
  -
    httpMethods:
      - PUT
    uri: 'players/{player}'
    metadata:
      title: 'Update a player'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      player:
        name: player
        description: ''
        required: true
        example: 9
        type: integer
        custom: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the player. Must be less than or equal to 100 characters. Must not be greater than 100 characters.'
        required: true
        example: Adi
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "Adi",
            "_url": "/players/1",
            "tournament_url": "/tournaments/1",
            "created_at": "1970-01-01 00:00:00",
            "updated_at": "1970-01-01 00:00:00"
          }
        headers: []
        description: '200, Success'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
      -
        status: 422
        content: |-
          {
            "message": "Please give a name to the tournament (and 1 more error)",
            "errors": {
                "name": [
                    "Please give a name to the tournament"
                ],
                "description": [
                    "Description must be under 500 characters"
                ]
            }
          }
        headers: []
        description: '422, Invalid Request Body'
    responseFields: []
  -
    httpMethods:
      - DELETE
    uri: 'players/{player}'
    metadata:
      title: 'Delete a player'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      player:
        name: player
        description: ''
        required: true
        example: 13
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"status": "Success"}'
        headers: []
        description: '200, Success'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
    responseFields: []
