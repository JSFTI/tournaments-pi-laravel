## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Match Management'
description: |-

  APIS for managing tournament matches.
endpoints:
  -
    httpMethods:
      - GET
    uri: 'tournaments/{tournament}/matches/{match_num}'
    metadata:
      title: 'Get Match by Match Number'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      tournament:
        name: tournament
        description: ''
        required: true
        example: 15
        type: integer
        custom: []
      match_num:
        name: match_num
        description: ''
        required: true
        example: 20
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 398,
            "match": 1,
            "player_id": 15,
            "tournament_id": 5,
            "created_at": "2022-05-23T06:52:37.000000Z",
            "updated_at": "2022-05-23T06:53:20.000000Z",
            "prev_match": {
                "left": {
                    "id": 399,
                    "match": null,
                    "player_id": 14,
                    "tournament_id": 5,
                    "created_at": "2022-05-23T06:52:37.000000Z",
                    "updated_at": "2022-05-23T06:52:37.000000Z",
                    "player": {
                        "id": 14,
                        "name": "JSON",
                        "tournament_id": 5,
                        "created_at": "2022-05-23T06:51:46.000000Z",
                        "updated_at": "2022-05-23T06:51:46.000000Z",
                        "_url": "/players/14",
                        "tournament_url": "/tournaments/5"
                    }
                },
                "right": {
                    "id": 400,
                    "match": null,
                    "player_id": 15,
                    "tournament_id": 5,
                    "created_at": "2022-05-23T06:52:37.000000Z",
                    "updated_at": "2022-05-23T06:52:37.000000Z",
                    "player": {
                        "id": 15,
                        "name": "XML",
                        "tournament_id": 5,
                        "created_at": "2022-05-23T06:51:49.000000Z",
                        "updated_at": "2022-05-23T06:51:49.000000Z",
                        "_url": "/players/15",
                        "tournament_url": "/tournaments/5"
                    }
                }
            },
            "player": {
                "id": 15,
                "name": "XML",
                "tournament_id": 5,
                "created_at": "2022-05-23T06:51:49.000000Z",
                "updated_at": "2022-05-23T06:51:49.000000Z",
                "_url": "/players/15",
                "tournament_url": "/tournaments/5"
            }
          }
        headers: []
        description: '200, Success'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
    responseFields:
      id:
        name: id
        description: 'Id of match bracket.'
        type: integer
      created_at:
        name: created_at
        description: 'Date bracket created.'
        type: string
      updated_at:
        name: updated_at
        description: 'Date bracket created.'
        type: string
      match:
        name: match
        description: 'If a bracket has previous match, it will be filled by match number,'
        type: integer
      player:
        name: player
        description: 'Player in this bracket. If **null**, it means that the bracket has no player yet.'
        type: object
      _url:
        name: _url
        description: 'URL to bracket.'
        type: string
      prev_match:
        name: prev_match
        description: 'Previous match. Seperated to left and right side. If **null**, it means that the bracket has no previous match.'
        type: object
      prev_match.left:
        name: prev_match.left
        description: 'Prevous match on the left side.'
        type: object
      prev_match.right:
        name: prev_match.right
        description: 'Prevous match on the right side.'
        type: object
  -
    httpMethods:
      - PUT
    uri: 'tournaments/{tournament}/matches/{match_num}/winner'
    metadata:
      title: 'Declare Match Winner'
      description: 'Assigns a winner to a match. Winner can only be declared if tournament is started and player comes from previous match/bracket.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      tournament:
        name: tournament
        description: ''
        required: true
        example: 13
        type: integer
        custom: []
      match_num:
        name: match_num
        description: 'Match number of a tournament.'
        required: false
        example: 4
        type: integer
        custom: []
    queryParameters: []
    bodyParameters:
      player_id:
        name: player_id
        description: 'The winner of the match.'
        required: true
        example: odit
        type: string
        custom: []
    responses:
      -
        status: 200
        content: '{"message": "Winner declared"}'
        headers: []
        description: '200, Success'
      -
        status: 400
        content: '{"message": "Error message"}'
        headers: []
        description: '400, Bad Request'
      -
        status: 401
        content: '{"message": "Unauthenticated"}'
        headers: []
        description: '401, Unauthorized'
      -
        status: 404
        content: |-
          {
            "message": "Reason of error"
          }
        headers: []
        description: '404, Not Found'
    responseFields: []
