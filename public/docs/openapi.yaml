openapi: 3.0.3
info:
  title: 'Tournaments API'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /login:
    post:
      summary: Login
      description: 'Returns JWT, user ID, and username if credentials match.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  token: 'JWT TOKEN'
                  user:
                    id: 1
                    name: userame
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                    description: 'Status message.'
                  token:
                    type: string
                    example: 'JWT TOKEN'
                    description: 'JWT value.'
                  user:
                    type: object
                    example:
                      id: 1
                      name: userame
                    description: object.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Already authenticated'
                properties:
                  message:
                    type: string
                    example: 'Already authenticated'
                    description: 'Status message.'
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please provide a registered username (and 1 more error)'
                  errors:
                    username:
                      - 'Please provide a registered username'
                    password:
                      - 'Plese provide the password'
                properties:
                  message:
                    type: string
                    example: 'Please provide a registered username (and 1 more error)'
                    description: 'Status message.'
                  errors:
                    type: object
                    example:
                      username:
                        - 'Please provide a registered username'
                      password:
                        - 'Plese provide the password'
      tags:
        - 'Authentication Endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Your username.'
                  example: username
                password:
                  type: string
                  description: 'Your password.'
                  example: password
              required:
                - username
                - password
      security: []
  /register:
    post:
      summary: Register
      description: 'Registers a new user. Returns JWT, user ID, and username.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration successful'
                  token: 'JWT TOKEN'
                  user:
                    id: 1
                    name: userame
                properties:
                  message:
                    type: string
                    example: 'Registration successful'
                    description: 'Status message.'
                  token:
                    type: string
                    example: 'JWT TOKEN'
                    description: 'JWT value.'
                  user:
                    type: object
                    example:
                      id: 1
                      name: userame
                    description: object.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Already authenticated'
                properties:
                  message:
                    type: string
                    example: 'Already authenticated'
                    description: 'Status message.'
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please provide a new username (and 2 more errors)'
                  errors:
                    username:
                      - 'Please provide a new username'
                    email:
                      - 'Please provide an email'
                    password:
                      - 'Please provide a password'
                properties:
                  message:
                    type: string
                    example: 'Please provide a new username (and 2 more errors)'
                    description: 'Status message.'
                  errors:
                    type: object
                    example:
                      username:
                        - 'Please provide a new username'
                      email:
                        - 'Please provide an email'
                      password:
                        - 'Please provide a password'
      tags:
        - 'Authentication Endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'New username.'
                  example: username
                email:
                  type: string
                  description: 'New email.'
                  example: email@example.com
                password:
                  type: string
                  description: 'Your password.'
                  example: password
                password_confirmation:
                  type: string
                  description: 'Same value as ```password```.'
                  example: password
              required:
                - username
                - email
                - password
      security: []
  '/tournaments/{tournament}/brackets':
    get:
      summary: 'Get brackets'
      description: ''
      parameters:
        -
          in: query
          name: dataStructure
          description: 'enum(tree,list) Defaults to "list". Returns created brackets in tree or list.<br/>For **trees**, brackets will be structured recursively in a **```binary tree```**, under the ```prev_match``` attribute with the last match as root.<br/>For **lists**, brackets will be structured in an **```array```**.'
          example: enim
          required: false
          schema:
            type: string
            description: 'enum(tree,list) Defaults to "list". Returns created brackets in tree or list.<br/>For **trees**, brackets will be structured recursively in a **```binary tree```**, under the ```prev_match``` attribute with the last match as root.<br/>For **lists**, brackets will be structured in an **```array```**.'
            example: enim
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        0:
          description: Created
          content:
            application/json:
              schema:
                type: object
                example:
                  brackets:
                    -
                      match: 1
                      player: null
                      prev_match:
                        left:
                          match: null
                          player:
                            name: Adi
                            _url: /players/1
                            tournament_url: /tournaments/2
                          _url: /tournaments/2/brackets/1
                        right:
                          match: null
                          player:
                            name: Budi
                            _url: /players/2
                            tournament_url: /tournaments/2
                          _url: /tournaments/2/brackets/2
                      _url: /tournaments/2/brackets/3
                  _url: /tournaments/2/brackets
                  tournament_url: /tournaments/2
                properties:
                  brackets:
                    type: array
                    example:
                      -
                        match: 1
                        player: null
                        prev_match:
                          left:
                            match: null
                            player:
                              name: Adi
                              _url: /players/1
                              tournament_url: /tournaments/2
                            _url: /tournaments/2/brackets/1
                          right:
                            match: null
                            player:
                              name: Budi
                              _url: /players/2
                              tournament_url: /tournaments/2
                            _url: /tournaments/2/brackets/2
                        _url: /tournaments/2/brackets/3
                    description: 'Array of bracket objects.'
                    items:
                      type: object
                  _url:
                    type: string
                    example: /tournaments/2/brackets
                  tournament_url:
                    type: string
                    example: /tournaments/2
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
        204:
          description: ''
      tags:
        - 'Manage Brackets'
      security: []
    put:
      summary: 'Create new brackets or replace old brackets.'
      description: "Brackets will be filled randomly with players associated with the tournament. Brackets will be build until the final bracket.\nThis endpoint can be called again to randomly insert recently added players into the brackets.<br />\nOnly tournament owner can create or replace brackets.\n\n<aside class=\"danger\">Calling this endpoint replaces previously generated bracket.</aside>\n\n<aside class=\"info\">No body parameters are required for this end-point. Any body parameters will be ignored</aside>"
      parameters:
        -
          in: query
          name: dataStructure
          description: 'enum(tree,list) Defaults to "list". Returns created brackets in tree or list.<br/>For **trees**, brackets will be structured recursively in a **```binary tree```**, under the ```prev_match``` attribute with the last match as root.<br/>For **lists**, brackets will be structured in an **```array```**.'
          example: eos
          required: false
          schema:
            type: string
            description: 'enum(tree,list) Defaults to "list". Returns created brackets in tree or list.<br/>For **trees**, brackets will be structured recursively in a **```binary tree```**, under the ```prev_match``` attribute with the last match as root.<br/>For **lists**, brackets will be structured in an **```array```**.'
            example: eos
        -
          in: query
          name: empty
          description: 'Defaults to "true". If ```empty``` is specified, players will not be added automatically. Refer to **Upsert Player in Bracket**.'
          example: true
          required: false
          schema:
            type: boolean
            description: 'Defaults to "true". If ```empty``` is specified, players will not be added automatically. Refer to **Upsert Player in Bracket**.'
            example: true
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        0:
          description: 'Created (Brackets created)'
          content:
            application/json:
              schema:
                type: object
                example:
                  brackets:
                    -
                      match: 1
                      player: null
                      prev_match:
                        left:
                          match: null
                          player:
                            name: Adi
                            _url: /players/1
                            tournament_url: /tournaments/2
                          _url: /tournaments/2/brackets/1
                        right:
                          match: null
                          player:
                            name: Budi
                            _url: /players/2
                            tournament_url: /tournaments/2
                          _url: /tournaments/2/brackets/2
                      _url: /tournaments/2/brackets/3
                  _url: /tournaments/2/brackets
                  tournament_url: /tournaments/2
                properties:
                  brackets:
                    type: array
                    example:
                      -
                        match: 1
                        player: null
                        prev_match:
                          left:
                            match: null
                            player:
                              name: Adi
                              _url: /players/1
                              tournament_url: /tournaments/2
                            _url: /tournaments/2/brackets/1
                          right:
                            match: null
                            player:
                              name: Budi
                              _url: /players/2
                              tournament_url: /tournaments/2
                            _url: /tournaments/2/brackets/2
                        _url: /tournaments/2/brackets/3
                    description: 'Array of bracket objects.'
                    items:
                      type: object
                  _url:
                    type: string
                    example: /tournaments/2/brackets
                    description: 'URL to bracket list of the tournament.'
                  tournament_url:
                    type: string
                    example: /tournaments/2
                    description: 'URL to the tournament.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Manage Brackets'
    parameters:
      -
        in: path
        name: tournament
        description: ''
        example: 2
        required: true
        schema:
          type: integer
  '/brackets/{bracket}/player':
    put:
      summary: 'Upsert Player in Bracket'
      description: "Insert a player to a bracket or replace a player in a bracket. Upsert can only be done if tournament has not started yet.\n\n<aside class=\"info\">If upserted player is already in the tournament brackets and the bracket is already assigned to a player, then both players' position in the bracket will be swapped.</aside>"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Player upserted'
                properties:
                  message:
                    type: string
                    example: 'Player upserted'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Error message'
                properties:
                  message:
                    type: string
                    example: 'Error message'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Manage Brackets'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                player_id:
                  type: integer
                  description: 'Target player.'
                  example: 17
    parameters:
      -
        in: path
        name: bracket
        description: ''
        example: 10
        required: true
        schema:
          type: integer
  '/tournaments/{tournament}/matches/{match_num}':
    get:
      summary: 'Get Match by Match Number'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 398
                  match: 1
                  player_id: 15
                  tournament_id: 5
                  created_at: '2022-05-23T06:52:37.000000Z'
                  updated_at: '2022-05-23T06:53:20.000000Z'
                  prev_match:
                    left:
                      id: 399
                      match: null
                      player_id: 14
                      tournament_id: 5
                      created_at: '2022-05-23T06:52:37.000000Z'
                      updated_at: '2022-05-23T06:52:37.000000Z'
                      player:
                        id: 14
                        name: JSON
                        tournament_id: 5
                        created_at: '2022-05-23T06:51:46.000000Z'
                        updated_at: '2022-05-23T06:51:46.000000Z'
                        _url: /players/14
                        tournament_url: /tournaments/5
                    right:
                      id: 400
                      match: null
                      player_id: 15
                      tournament_id: 5
                      created_at: '2022-05-23T06:52:37.000000Z'
                      updated_at: '2022-05-23T06:52:37.000000Z'
                      player:
                        id: 15
                        name: XML
                        tournament_id: 5
                        created_at: '2022-05-23T06:51:49.000000Z'
                        updated_at: '2022-05-23T06:51:49.000000Z'
                        _url: /players/15
                        tournament_url: /tournaments/5
                  player:
                    id: 15
                    name: XML
                    tournament_id: 5
                    created_at: '2022-05-23T06:51:49.000000Z'
                    updated_at: '2022-05-23T06:51:49.000000Z'
                    _url: /players/15
                    tournament_url: /tournaments/5
                properties:
                  id:
                    type: integer
                    example: 398
                    description: 'Id of match bracket.'
                  match:
                    type: integer
                    example: 1
                    description: 'If a bracket has previous match, it will be filled by match number,'
                  player_id:
                    type: integer
                    example: 15
                  tournament_id:
                    type: integer
                    example: 5
                  created_at:
                    type: string
                    example: '2022-05-23T06:52:37.000000Z'
                    description: 'Date bracket created.'
                  updated_at:
                    type: string
                    example: '2022-05-23T06:53:20.000000Z'
                    description: 'Date bracket created.'
                  prev_match:
                    type: object
                    example:
                      left:
                        id: 399
                        match: null
                        player_id: 14
                        tournament_id: 5
                        created_at: '2022-05-23T06:52:37.000000Z'
                        updated_at: '2022-05-23T06:52:37.000000Z'
                        player:
                          id: 14
                          name: JSON
                          tournament_id: 5
                          created_at: '2022-05-23T06:51:46.000000Z'
                          updated_at: '2022-05-23T06:51:46.000000Z'
                          _url: /players/14
                          tournament_url: /tournaments/5
                      right:
                        id: 400
                        match: null
                        player_id: 15
                        tournament_id: 5
                        created_at: '2022-05-23T06:52:37.000000Z'
                        updated_at: '2022-05-23T06:52:37.000000Z'
                        player:
                          id: 15
                          name: XML
                          tournament_id: 5
                          created_at: '2022-05-23T06:51:49.000000Z'
                          updated_at: '2022-05-23T06:51:49.000000Z'
                          _url: /players/15
                          tournament_url: /tournaments/5
                    description: 'Previous match. Seperated to left and right side. If **null**, it means that the bracket has no previous match.'
                  player:
                    type: object
                    example:
                      id: 15
                      name: XML
                      tournament_id: 5
                      created_at: '2022-05-23T06:51:49.000000Z'
                      updated_at: '2022-05-23T06:51:49.000000Z'
                      _url: /players/15
                      tournament_url: /tournaments/5
                    description: 'Player in this bracket. If **null**, it means that the bracket has no player yet.'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Match Management'
      security: []
    parameters:
      -
        in: path
        name: tournament
        description: ''
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: match_num
        description: ''
        example: 9
        required: true
        schema:
          type: integer
  '/tournaments/{tournament}/matches/{match_num}/winner':
    put:
      summary: 'Declare Match Winner'
      description: 'Assigns a winner to a match. Winner can only be declared if tournament is started and player comes from previous match/bracket.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Winner declared'
                properties:
                  message:
                    type: string
                    example: 'Winner declared'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Error message'
                properties:
                  message:
                    type: string
                    example: 'Error message'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Match Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player_id:
                  type: string
                  description: 'The winner of the match.'
                  example: nihil
              required:
                - player_id
    parameters:
      -
        in: path
        name: tournament
        description: ''
        example: 11
        required: true
        schema:
          type: integer
      -
        in: path
        name: match_num
        description: 'Optional parameter. Match number of a tournament.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 15
  /me:
    get:
      summary: 'Get Current User'
      description: 'Get current authenticated user.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: username
                  email: name@example.com
                properties:
                  id:
                    type: integer
                    example: 1
                    description: 'Current authenticated user ID.'
                  name:
                    type: string
                    example: username
                    description: 'Current authenticated user username.'
                  email:
                    type: string
                    example: name@example.com
                    description: 'Current authenticated user email.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Misc
    put:
      summary: 'Edit Current User'
      description: 'Edit current authenticated user.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 'JWT Token'
                properties:
                  id:
                    type: string
                    example: 'JWT Token'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please provide a new username (and 1 more error)'
                  errors:
                    username:
                      - 'Please provide a new username'
                    email:
                      - 'Please provide an email'
                properties:
                  message:
                    type: string
                    example: 'Please provide a new username (and 1 more error)'
                  errors:
                    type: object
                    example:
                      username:
                        - 'Please provide a new username'
                      email:
                        - 'Please provide an email'
      tags:
        - Misc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Changed username.'
                  example: username
                email:
                  type: string
                  description: 'Changed email.'
                  example: email@example.com
              required:
                - username
                - email
  /me/password:
    put:
      summary: 'Edit Current Password'
      description: 'Change current authenticated user''s password.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password changed'
                properties:
                  message:
                    type: string
                    example: 'Password changed'
                    description: 'Status message.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                    description: 'Status message.'
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please give the old password (and 1 more error)'
                  errors:
                    oldPassword:
                      - 'Please give the old password'
                    password:
                      - 'Please provide a password'
                properties:
                  message:
                    type: string
                    example: 'Please give the old password (and 1 more error)'
                    description: 'Status message.'
                  errors:
                    type: object
                    example:
                      oldPassword:
                        - 'Please give the old password'
                      password:
                        - 'Please provide a password'
      tags:
        - Misc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: 'Old password. Necessary for security reasons.'
                  example: password
                password:
                  type: string
                  description: 'New password.'
                  example: newPassword
                password_confirmation:
                  type: string
                  description: 'Confirm new password.'
                  example: newPassword
              required:
                - oldPassword
                - password
  '/tournaments/{tournament}/players':
    get:
      summary: 'Get players of a tournament'
      description: 'Players list is ordered in descending order by creation time.'
      parameters:
        -
          in: query
          name: page
          description: 'Defaults to ```1```. Values less than 1 will default to 1.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Defaults to ```1```. Values less than 1 will default to 1.'
            example: 1
        -
          in: query
          name: name
          description: 'Search for player that contains ```name``` keyword.'
          example: null
          required: false
          schema:
            type: string
            description: 'Search for player that contains ```name``` keyword.'
            example: null
        -
          in: query
          name: limit
          description: 'Defaults to ```10```. Values less than 1 will default to 1.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Defaults to ```10```. Values less than 1 will default to 1.'
            example: 10
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  count: 100
                  total_pages: 10
                  page: 1
                  next_page: '/tournaments/1/players?page=2'
                  prev_page: null
                  results:
                    -
                      id: 1
                      name: Adi
                      _url: /players/1
                      tournament_url: /tournaments/1
                      created_at: '1970-01-01 00:00:00'
                      updated_at: '1970-01-01 00:00:00'
                properties:
                  count:
                    type: integer
                    example: 100
                    description: ''
                  total_pages:
                    type: integer
                    example: 10
                    description: ''
                  page:
                    type: integer
                    example: 1
                  next_page:
                    type: string
                    example: '/tournaments/1/players?page=2'
                    description: 'Returns ```null``` if last page is reached.'
                  prev_page:
                    type: string
                    example: null
                    description: 'Returns ```null``` if it is the first page.'
                  results:
                    type: array
                    example:
                      -
                        id: 1
                        name: Adi
                        _url: /players/1
                        tournament_url: /tournaments/1
                        created_at: '1970-01-01 00:00:00'
                        updated_at: '1970-01-01 00:00:00'
                    description: 'List of players in tournament.'
                    items:
                      type: object
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Player Management'
      security: []
    post:
      summary: 'Create a player in a tournament'
      description: 'Only tournament owner can create a player in a tournament.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: Adi
                  _url: /players/1
                  tournament_url: /tournaments/1
                  created_at: '1970-01-01 00:00:00'
                  updated_at: '1970-01-01 00:00:00'
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Adi
                  _url:
                    type: string
                    example: /players/1
                  tournament_url:
                    type: string
                    example: /tournaments/1
                  created_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                  updated_at:
                    type: string
                    example: '1970-01-01 00:00:00'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
        422:
          description: 'Invalid Request Body'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    name:
                      - 'Please give a name to the tournament'
                    description:
                      - 'Description must be under 500 characters'
                properties:
                  message:
                    type: string
                    example: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    type: object
                    example:
                      name:
                        - 'Please give a name to the tournament'
                      description:
                        - 'Description must be under 500 characters'
      tags:
        - 'Player Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the player. Must be less than or equal to 100 characters. Must not be greater than 100 characters.'
                  example: Adi
              required:
                - name
    parameters:
      -
        in: path
        name: tournament
        description: ''
        example: 19
        required: true
        schema:
          type: integer
  '/players/{player}':
    get:
      summary: 'Get a player'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: Adi
                  _url: /players/1
                  tournament_url: /tournaments/1
                  created_at: '1970-01-01 00:00:00'
                  updated_at: '1970-01-01 00:00:00'
                properties:
                  id:
                    type: integer
                    example: 1
                    description: 'Tournament ID.'
                  name:
                    type: string
                    example: Adi
                    description: 'Tournament name.'
                  _url:
                    type: string
                    example: /players/1
                    description: 'URL to player resource.'
                  tournament_url:
                    type: string
                    example: /tournaments/1
                    description: 'URL to a tournament which the player belongs to.'
                  created_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                    description: 'Tournament creation timestamp.'
                  updated_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                    description: 'Last update timestamp.'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Player Management'
      security: []
    put:
      summary: 'Update a player'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: Adi
                  _url: /players/1
                  tournament_url: /tournaments/1
                  created_at: '1970-01-01 00:00:00'
                  updated_at: '1970-01-01 00:00:00'
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Adi
                  _url:
                    type: string
                    example: /players/1
                  tournament_url:
                    type: string
                    example: /tournaments/1
                  created_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                  updated_at:
                    type: string
                    example: '1970-01-01 00:00:00'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
        422:
          description: 'Invalid Request Body'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    name:
                      - 'Please give a name to the tournament'
                    description:
                      - 'Description must be under 500 characters'
                properties:
                  message:
                    type: string
                    example: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    type: object
                    example:
                      name:
                        - 'Please give a name to the tournament'
                      description:
                        - 'Description must be under 500 characters'
      tags:
        - 'Player Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the player. Must be less than or equal to 100 characters. Must not be greater than 100 characters.'
                  example: Adi
              required:
                - name
    delete:
      summary: 'Delete a player'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: Success
                properties:
                  status:
                    type: string
                    example: Success
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Player Management'
    parameters:
      -
        in: path
        name: player
        description: ''
        example: 3
        required: true
        schema:
          type: integer
  /tournaments:
    get:
      summary: 'Get tournaments'
      description: 'Tournament list is ordered in descending order by creation time.'
      parameters:
        -
          in: query
          name: page
          description: 'Defaults to ```1```. Values less than 1 will default to 1.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Defaults to ```1```. Values less than 1 will default to 1.'
            example: 1
        -
          in: query
          name: name
          description: 'Search for tournament that contains ```name``` keyword.'
          example: null
          required: false
          schema:
            type: string
            description: 'Search for tournament that contains ```name``` keyword.'
            example: null
        -
          in: query
          name: limit
          description: 'Defaults to ```10```. Values less than 1 will default to 1.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Defaults to ```10```. Values less than 1 will default to 1.'
            example: 10
        -
          in: query
          name: user
          description: 'Get tournaments owned by specified user with id.'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Get tournaments owned by specified user with id.'
            example: 20
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  count: 100
                  total_pages: 10
                  page: 1
                  next_page: '/tournaments?page=2'
                  prev_page: null
                  results:
                    -
                      id: 1
                      name: 'Tournament 1'
                      description: 'The mind is willing, but the body is spongy and bruised'
                      started: false
                      created_at: '1970-01-01 00:00:00'
                      updated_at: '1970-01-01 00:00:00'
                      _url: /tournaments/1
                properties:
                  count:
                    type: integer
                    example: 100
                    description: ''
                  total_pages:
                    type: integer
                    example: 10
                    description: ''
                  page:
                    type: integer
                    example: 1
                  next_page:
                    type: string
                    example: '/tournaments?page=2'
                    description: 'Returns ```null``` if last page is reached.'
                  prev_page:
                    type: string
                    example: null
                    description: 'Returns ```null``` if it is the first page.'
                  results:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Tournament 1'
                        description: 'The mind is willing, but the body is spongy and bruised'
                        started: false
                        created_at: '1970-01-01 00:00:00'
                        updated_at: '1970-01-01 00:00:00'
                        _url: /tournaments/1
                    description: 'List of tournaments'
                    items:
                      type: object
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Tournament Management'
      security: []
    post:
      summary: 'Create a tournament'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'Tournament 1'
                  description: 'The mind is willing, but the body is spongy and bruised'
                  started: false
                  created_at: '1970-01-01 00:00:00'
                  updated_at: '1970-01-01 00:00:00'
                  _url: /tournaments/1
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Tournament 1'
                  description:
                    type: string
                    example: 'The mind is willing, but the body is spongy and bruised'
                  started:
                    type: boolean
                    example: false
                  created_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                  updated_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                  _url:
                    type: string
                    example: /tournaments/1
        422:
          description: 'Invalid Request Body'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    name:
                      - 'Please give a name to the tournament'
                    description:
                      - 'Description must be under 500 characters'
                properties:
                  message:
                    type: string
                    example: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    type: object
                    example:
                      name:
                        - 'Please give a name to the tournament'
                      description:
                        - 'Description must be under 500 characters'
      tags:
        - 'Tournament Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the tournament. Must be less than or equal to 100 characters. Must not be greater than 100 characters.'
                  example: 'Tournament Awesome'
                description:
                  type: string
                  description: 'Short description of the tournament. Must be less than or equal to 500 characters. Note: WYSIWYG tags and markdowns are considered too. Must not be greater than 500 characters.'
                  example: 'Lorem ipsum dolor sit...'
              required:
                - name
  '/tournaments/{tournament}':
    get:
      summary: 'Get a tournament'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'Tournament 1'
                  description: 'The mind is willing, but the body is spongy and bruised'
                  started: false
                  created_at: '1970-01-01 00:00:00'
                  updated_at: '1970-01-01 00:00:00'
                  _url: /tournaments/1
                properties:
                  id:
                    type: integer
                    example: 1
                    description: 'Tournament ID.'
                  name:
                    type: string
                    example: 'Tournament 1'
                    description: 'Tournament name.'
                  description:
                    type: string
                    example: 'The mind is willing, but the body is spongy and bruised'
                    description: 'Tournament description.'
                  started:
                    type: boolean
                    example: false
                    description: 'Tournament started.'
                  created_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                    description: 'Tournament creation timestamp.'
                  updated_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                    description: 'Last update timestamp.'
                  _url:
                    type: string
                    example: /tournaments/1
                    description: 'URL to tournament resource.'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Tournament Management'
      security: []
    put:
      summary: 'Replace a tournament'
      description: 'Tournament can only be replaces/edited by tournament owner.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'Tournament 1'
                  description: 'The mind is willing, but the body is spongy and bruised'
                  started: false
                  created_at: '1970-01-01 00:00:00'
                  updated_at: '1970-01-01 00:00:00'
                  _url: /tournaments/1
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Tournament 1'
                  description:
                    type: string
                    example: 'The mind is willing, but the body is spongy and bruised'
                  started:
                    type: boolean
                    example: false
                  created_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                  updated_at:
                    type: string
                    example: '1970-01-01 00:00:00'
                  _url:
                    type: string
                    example: /tournaments/1
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
        422:
          description: 'Invalid Request Body'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    name:
                      - 'Please give a name to the tournament'
                    description:
                      - 'Description must be under 500 characters'
                properties:
                  message:
                    type: string
                    example: 'Please give a name to the tournament (and 1 more error)'
                  errors:
                    type: object
                    example:
                      name:
                        - 'Please give a name to the tournament'
                      description:
                        - 'Description must be under 500 characters'
      tags:
        - 'Tournament Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the tournament. Must be less than or equal to 100 characters. Must not be greater than 100 characters.'
                  example: 'Tournament Awesome'
                description:
                  type: string
                  description: 'Short description of the tournament. Must be less than or equal to 500 characters. Note: WYSIWYG tags and markdowns are considered too. Must not be greater than 500 characters.'
                  example: 'Lorem ipsum dolor sit...'
              required:
                - name
      security: []
    delete:
      summary: 'Delete a tournament'
      description: 'Tournament can only be deleted by tournament owner.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tournament deleted'
                properties:
                  message:
                    type: string
                    example: 'Tournament deleted'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Tournament Management'
    parameters:
      -
        in: path
        name: tournament
        description: ''
        example: 10
        required: true
        schema:
          type: integer
  '/tournaments/{tournament}/start':
    put:
      summary: 'Start Tournament'
      description: 'Start a tournament. Tournament can only be started if all initial brackets are filled and can only be started by tournamnet owner.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tournament started'
                properties:
                  message:
                    type: string
                    example: 'Tournament started'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Error message'
                properties:
                  message:
                    type: string
                    example: 'Error message'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reason of error'
                properties:
                  message:
                    type: string
                    example: 'Reason of error'
      tags:
        - 'Tournament Management'
    parameters:
      -
        in: path
        name: tournament
        description: ''
        example: 6
        required: true
        schema:
          type: integer
tags:
  -
    name: 'Authentication Endpoints'
    description: ''
  -
    name: 'Manage Brackets'
    description: "\nAPI end-points to manage tournament brackets."
  -
    name: 'Match Management'
    description: "\nAPIS for managing tournament matches."
  -
    name: Misc
    description: ''
  -
    name: 'Player Management'
    description: "\nAPIS for managing players"
  -
    name: 'Tournament Management'
    description: "\nAPIS for managing tournaments"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
